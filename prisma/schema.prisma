generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model currencies {
  id           Int               @id @default(autoincrement()) @db.UnsignedInt
  name         String            @db.Char(191)
  symbol       String            @db.Char(191)
  type         currencies_type
  wallet_count Int               @default(0)
  status       currencies_status @default(active)
  created_at   DateTime?         @db.Timestamp(0)
  updated_at   DateTime?         @db.Timestamp(0)
<<<<<<< HEAD
  funds        funds[]
=======
  fees         fees[]
  funds        funds[]
  interchanges interchanges[]
  transactions transactions[]
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  wallets      wallets[]
}

model failed_jobs {
<<<<<<< HEAD
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
=======
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

<<<<<<< HEAD
model funds {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  currency_id Int          @db.UnsignedInt
  user_id     String       @db.Char(36)
  wallet_id   Int          @db.UnsignedInt
  amount      Decimal      @db.Decimal(14, 2)
  title       String       @db.Char(191)
  source      String       @db.Char(191)
  TxId        String       @db.Char(191)
  type        funds_type
  description String
  status      funds_status
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  currencies  currencies   @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "funds_currency_id_foreign")
  users       users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "funds_user_id_foreign")
  wallets     wallets      @relation(fields: [wallet_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "funds_wallet_id_foreign")

  @@index([currency_id], map: "funds_currency_id_foreign")
  @@index([user_id], map: "funds_user_id_foreign")
  @@index([wallet_id], map: "funds_wallet_id_foreign")
=======
model fees {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  currency_id Int        @db.UnsignedInt
  title       String     @db.Char(191)
  amount      Decimal    @db.Decimal(14, 0)
  percent     Decimal    @db.Decimal(4, 3)
  type        fees_type
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  currencies  currencies @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fees_currency_id_foreign")

  @@index([currency_id], map: "fees_currency_id_foreign")
}

model funds {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  currency_id      Int          @db.UnsignedInt
  user_id          String       @db.Char(36)
  symbol           String
  account_number   Int          @db.UnsignedInt
  balance          Decimal      @default(0.00) @db.Decimal(14, 2)
  on_order         Decimal      @default(0.00) @db.Decimal(14, 2)
  withdrawal_limit Decimal      @default(0.00) @db.Decimal(14, 2)
  deposit_limit    Decimal      @default(0.00) @db.Decimal(14, 2)
  status           funds_status
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  currencies       currencies   @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "funds_currency_id_foreign")
  users            users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "funds_user_id_foreign")

  @@index([currency_id], map: "funds_currency_id_foreign")
  @@index([user_id], map: "funds_user_id_foreign")
}

model interchanges {
  id             String              @id @db.Char(36)
  currency_id    Int                 @db.UnsignedInt
  user_id        String              @db.Char(36)
  wallet_id      String              @db.Char(36)
  account_number Int                 @db.UnsignedInt
  amount         Decimal             @db.Decimal(14, 2)
  net_amount     Decimal             @db.Decimal(14, 2)
  fee_percent    Decimal             @db.Decimal(4, 3)
  fee            Decimal             @db.Decimal(12, 4)
  TxId           String              @db.Char(191)
  type           interchanges_type
  description    String
  status         interchanges_status
  created_at     DateTime?           @db.Timestamp(0)
  updated_at     DateTime?           @db.Timestamp(0)
  currencies     currencies          @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "interchanges_currency_id_foreign")
  users          users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "interchanges_user_id_foreign")
  wallets        wallets             @relation(fields: [wallet_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "interchanges_wallet_id_foreign")

  @@index([currency_id], map: "interchanges_currency_id_foreign")
  @@index([user_id], map: "interchanges_user_id_foreign")
  @@index([wallet_id], map: "interchanges_wallet_id_foreign")
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model otps {
<<<<<<< HEAD
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    String   @db.Char(36)
  code       Int
  expired_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "otps_user_id_foreign")
=======
  id         String   @id @db.Char(36)
  user_id    String   @db.Char(36)
  code       Int
  expired_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "otps_user_id_foreign")
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4

  @@unique([user_id, code], map: "otps_user_id_code_unique")
}

model password_resets {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
}

model profiles {
<<<<<<< HEAD
  id                              Int       @id @default(autoincrement()) @db.UnsignedInt
=======
  id                              String    @id @db.Char(36)
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  user_id                         String    @db.Char(36)
  national_code                   Int?      @unique(map: "profiles_national_code_unique") @db.UnsignedInt
  national_code_verified_at       DateTime? @db.Timestamp(0)
  national_code_image             String?
  national_code_image_verified_at DateTime? @db.Timestamp(0)
  created_at                      DateTime? @db.Timestamp(0)
  updated_at                      DateTime? @db.Timestamp(0)
<<<<<<< HEAD
  users                           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "profiles_user_id_foreign")
=======
  users                           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_user_id_foreign")
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4

  @@index([user_id], map: "profiles_user_id_foreign")
}

<<<<<<< HEAD
model users {
  id                 String       @id @db.Char(36)
  first_name         String?
  last_name          String?
  mobile             String?      @unique(map: "users_mobile_unique")
  mobile_verified_at DateTime?    @db.Timestamp(0)
  password           String
  post               users_post   @default(user)
  level              users_level  @default(basic)
  fee                Decimal      @default(0.0050) @db.Decimal(4, 4)
  status             users_status @default(requested)
  remember_token     String?      @db.VarChar(100)
  created_at         DateTime?    @db.Timestamp(0)
  updated_at         DateTime?    @db.Timestamp(0)
  funds              funds[]
=======
model profits {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  symbol     String       @db.Char(191)
  title      String       @db.Char(191)
  balance    Decimal      @db.Decimal(14, 0)
  type       profits_type
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
}

model transactions {
  id                      String              @id @db.Char(36)
  currency_id             Int                 @db.UnsignedInt
  user_sender_id          Int                 @db.UnsignedInt
  user_receiver_id        Int                 @db.UnsignedInt
  wallet_sender_id        Int                 @db.UnsignedInt
  wallet_receiver_id      Int                 @db.UnsignedInt
  symbol                  String
  sender_account_number   Int                 @db.UnsignedInt
  receiver_account_number Int                 @db.UnsignedInt
  amount                  Decimal             @db.Decimal(14, 2)
  net_amount              Decimal             @db.Decimal(14, 2)
  fee_percent             Decimal             @db.Decimal(4, 3)
  fee                     Decimal             @db.Decimal(12, 4)
  TxId                    String              @db.Char(191)
  type                    transactions_type
  description             String
  status                  transactions_status
  created_at              DateTime?           @db.Timestamp(0)
  updated_at              DateTime?           @db.Timestamp(0)
  currencies              currencies          @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "transactions_currency_id_foreign")

  @@index([currency_id], map: "transactions_currency_id_foreign")
}

model users {
  id                 String         @id @db.Char(36)
  first_name         String?
  last_name          String?
  mobile             String?        @unique(map: "users_mobile_unique")
  mobile_verified_at DateTime?      @db.Timestamp(0)
  password           String
  post               users_post     @default(user)
  level              users_level    @default(basic)
  fee                Decimal        @default(0.0050) @db.Decimal(4, 4)
  status             users_status   @default(requested)
  remember_token     String?        @db.VarChar(100)
  created_at         DateTime?      @db.Timestamp(0)
  updated_at         DateTime?      @db.Timestamp(0)
  funds              funds[]
  interchanges       interchanges[]
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  otps               otps[]
  profiles           profiles[]
  wallets            wallets[]
}

model wallets {
<<<<<<< HEAD
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  currency_id      Int            @db.UnsignedInt
  user_id          String         @db.Char(36)
  symbol           String
=======
  id               String         @id @db.Char(36)
  currency_id      Int            @db.UnsignedInt
  user_id          String         @db.Char(36)
  symbol           String         @db.Char(191)
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  account_number   Int            @db.UnsignedInt
  balance          Decimal        @default(0.00) @db.Decimal(14, 2)
  on_order         Decimal        @default(0.00) @db.Decimal(14, 2)
  withdrawal_limit Decimal        @default(0.00) @db.Decimal(14, 2)
  deposit_limit    Decimal        @default(0.00) @db.Decimal(14, 2)
<<<<<<< HEAD
  status           wallets_status
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  currencies       currencies     @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wallets_currency_id_foreign")
  users            users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wallets_user_id_foreign")
  funds            funds[]
=======
  fee              Decimal        @default(0.0050) @db.Decimal(4, 4)
  status           wallets_status
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  currencies       currencies     @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wallets_currency_id_foreign")
  users            users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "wallets_user_id_foreign")
  interchanges     interchanges[]
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4

  @@index([currency_id], map: "wallets_currency_id_foreign")
  @@index([user_id], map: "wallets_user_id_foreign")
}

enum currencies_type {
  fiat
  crypto
}

enum currencies_status {
  active
  inactive
}

<<<<<<< HEAD
enum funds_type {
  deposit
  withdrawal
}

enum funds_status {
=======
enum fees_type {
  deposit
  withdrawal
  transaction
}

enum funds_status {
  active
  inactive
}

enum interchanges_type {
  deposit
  withdrawal
}

enum interchanges_status {
  pending
  rejected
  confirmed
}

enum profits_type {
  deposit
  withdrawal
  transaction
  payment
}

enum transactions_type {
  transaction
  payment
  profit
}

enum transactions_status {
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  pending
  rejected
  confirmed
}

enum users_post {
  user
  banker
<<<<<<< HEAD
=======
  agent
>>>>>>> 28c0fa3e1080b5cdb6fed996de57103ad6b582c4
  admin
  superAdmin
}

enum users_level {
  basic
  vip
}

enum users_status {
  requested
  registered
  confirmed
  blocked
}

enum wallets_status {
  active
  inactive
}
